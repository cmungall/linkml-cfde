type AnalysisType
  {
    id: String!
    description: String
    synonyms: [String]
  }

type Anatomy
  {
    id: String!
    description: String
    synonyms: [String]
  }

type AssayType
  {
    id: String!
    description: String
    synonyms: [String]
  }

type Biosample
  {
    idNamespace: IdNamespace!
    localId: String!
    projectIdNamespace: String!
    projectLocalId: String!
    persistentId: String
    creationTime: Datetime
    samplePrepMethod: SamplePrepMethod
    anatomy: Anatomy
  }

type BiosampleDisease
  {
    biosampleIdNamespace: String!
    biosampleLocalId: String!
    associationType: AssociationTypeEnum!
    disease: Disease!
  }

type BiosampleFromSubject
  {
    biosampleIdNamespace: String!
    biosampleLocalId: String!
    subjectIdNamespace: String!
    subjectLocalId: String!
    ageAtSampling: Decimal
  }

type BiosampleGene
  {
    biosampleIdNamespace: String!
    biosampleLocalId: String!
    gene: Gene!
  }

type BiosampleInCollection
  {
    biosampleIdNamespace: String!
    biosampleLocalId: String!
    collectionIdNamespace: String!
    collectionLocalId: String!
  }

type BiosampleSubstance
  {
    biosampleIdNamespace: String!
    biosampleLocalId: String!
    substance: Substance!
  }

type Collection
  {
    idNamespace: IdNamespace!
    localId: String!
    persistentId: String
    creationTime: Datetime
    abbreviation: String
    description: String
    hasTimeSeriesData: Boolean
  }

type CollectionAnatomy
  {
    collectionIdNamespace: String!
    collectionLocalId: String!
    anatomy: Anatomy!
  }

type CollectionCompound
  {
    collectionIdNamespace: String!
    collectionLocalId: String!
    compound: Compound!
  }

type CollectionDefinedByProject
  {
    collectionIdNamespace: String!
    collectionLocalId: String!
    projectIdNamespace: String!
    projectLocalId: String!
  }

type CollectionDisease
  {
    collectionIdNamespace: String!
    collectionLocalId: String!
    disease: Disease!
  }

type CollectionGene
  {
    collectionIdNamespace: String!
    collectionLocalId: String!
    gene: Gene!
  }

type CollectionInCollection
  {
    supersetCollectionIdNamespace: String!
    supersetCollectionLocalId: String!
    subsetCollectionIdNamespace: String!
    subsetCollectionLocalId: String!
  }

type CollectionPhenotype
  {
    collectionIdNamespace: String!
    collectionLocalId: String!
    phenotype: Phenotype!
  }

type CollectionProtein
  {
    collectionIdNamespace: String!
    collectionLocalId: String!
    protein: Protein!
  }

type CollectionSubstance
  {
    collectionIdNamespace: String!
    collectionLocalId: String!
    substance: Substance!
  }

type CollectionTaxonomy
  {
    collectionIdNamespace: String!
    collectionLocalId: String!
    taxon: NcbiTaxonomy!
  }

type Compound
  {
    id: String!
    description: String
    synonyms: [String]
  }

type DataType
  {
    id: String!
    description: String
    synonyms: [String]
  }

type Dcc
  {
    id: String!
    dccName: String!
    dccAbbreviation: String!
    dccDescription: String
    contactEmail: String!
    contactName: String!
    dccUrl: String!
    projectIdNamespace: String!
    projectLocalId: String!
  }

type Disease
  {
    id: String!
    description: String
    synonyms: [String]
  }

type File
  {
    idNamespace: IdNamespace!
    localId: String!
    projectIdNamespace: String!
    projectLocalId: String!
    persistentId: String
    creationTime: Datetime
    sizeInBytes: Integer
    uncompressedSizeInBytes: Integer
    sha256: String
    md5: String
    filename: String!
    fileFormat: FileFormat
    compressionFormat: FileFormat
    dataType: DataType
    assayType: AssayType
    analysisType: AnalysisType
    mimeType: String
    bundleCollectionIdNamespace: String
    bundleCollectionLocalId: String
    dbgapStudyId: String
  }

type FileDescribesBiosample
  {
    fileIdNamespace: String!
    fileLocalId: String!
    biosampleIdNamespace: String!
    biosampleLocalId: String!
  }

type FileDescribesCollection
  {
    fileIdNamespace: String!
    fileLocalId: String!
    collectionIdNamespace: String!
    collectionLocalId: String!
  }

type FileDescribesSubject
  {
    fileIdNamespace: String!
    fileLocalId: String!
    subjectIdNamespace: String!
    subjectLocalId: String!
  }

type FileFormat
  {
    id: String!
    description: String
    synonyms: [String]
  }

type FileInCollection
  {
    fileIdNamespace: String!
    fileLocalId: String!
    collectionIdNamespace: String!
    collectionLocalId: String!
  }

type Gene
  {
    id: String!
    description: String
    synonyms: [String]
    organism: NcbiTaxonomy!
  }

type IdNamespace
  {
    id: String!
    abbreviation: String
    description: String
  }

type NcbiTaxonomy
  {
    id: String!
    clade: String!
    description: String
    synonyms: [String]
  }

type Phenotype
  {
    id: String!
    description: String
    synonyms: [String]
  }

type PhenotypeDisease
  {
    phenotype: Phenotype!
    disease: Disease!
  }

type PhenotypeGene
  {
    phenotype: Phenotype!
    gene: Gene!
  }

type Project
  {
    idNamespace: IdNamespace!
    localId: String!
    persistentId: String
    creationTime: Datetime
    abbreviation: String
    description: String
  }

type ProjectInProject
  {
    parentProjectIdNamespace: String!
    parentProjectLocalId: String!
    childProjectIdNamespace: String!
    childProjectLocalId: String!
  }

type Protein
  {
    id: String!
    description: String
    synonyms: [String]
    organism: NcbiTaxonomy
  }

type ProteinGene
  {
    protein: Protein!
    gene: Gene!
  }

type SamplePrepMethod
  {
    id: String!
    description: String
    synonyms: [String]
  }

type Subject
  {
    idNamespace: IdNamespace!
    localId: String!
    projectIdNamespace: String!
    projectLocalId: String!
    persistentId: String
    creationTime: Datetime
    granularity: GranularityEnum!
    sex: SexEnum
    ethnicity: EthnicityEnum
    ageAtEnrollment: Decimal
  }

type SubjectDisease
  {
    subjectIdNamespace: String!
    subjectLocalId: String!
    associationType: AssociationTypeEnum!
    disease: Disease!
  }

type SubjectInCollection
  {
    subjectIdNamespace: String!
    subjectLocalId: String!
    collectionIdNamespace: String!
    collectionLocalId: String!
  }

type SubjectPhenotype
  {
    subjectIdNamespace: String!
    subjectLocalId: String!
    associationType: AssociationTypeEnum!
    phenotype: Phenotype!
  }

type SubjectRace
  {
    subjectIdNamespace: String!
    subjectLocalId: String!
    race: RaceEnum
  }

type SubjectRoleTaxonomy
  {
    subjectIdNamespace: String!
    subjectLocalId: String!
    roleId: RoleIdEnum!
    taxonomyId: NcbiTaxonomy!
  }

type SubjectSubstance
  {
    subjectIdNamespace: String!
    subjectLocalId: String!
    substance: Substance!
  }

type Substance
  {
    id: String!
    description: String
    synonyms: [String]
    compound: Compound!
  }

